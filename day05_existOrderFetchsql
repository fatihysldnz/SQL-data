-- IN komutu ile EXÝST komutu ayni iSlevi goruyor fakat EXÝS daha hýzlýdýr!

CREATE TABLE mart_satislar
    (
        urun_id number(10),
        musteri_isim varchar2(50),
        urun_isim varchar2(50)
    );
    CREATE TABLE nisan_satislar
    (
        urun_id number(10),
        musteri_isim varchar2(50),
        urun_isim varchar2(50)
    );
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (20, 'John', 'Toyota');
    INSERT INTO mart_satislar VALUES (30, 'Amy', 'Ford');
    INSERT INTO mart_satislar VALUES (20, 'Mark', 'Toyota');
    INSERT INTO mart_satislar VALUES (10, 'Adem', 'Honda');
    INSERT INTO mart_satislar VALUES (40, 'John', 'Hyundai');
    INSERT INTO mart_satislar VALUES (20, 'Eddie', 'Toyota');
    
    INSERT INTO nisan_satislar VALUES (10, 'Hasan', 'Honda');
    INSERT INTO nisan_satislar VALUES (10, 'Kemal', 'Honda');
    INSERT INTO nisan_satislar VALUES (20, 'Ayse', 'Toyota');
    INSERT INTO nisan_satislar VALUES (50, 'Yasar', 'Volvo');
    INSERT INTO nisan_satislar VALUES (20, 'Mine', 'Toyota');
    
    select * from mart_satýslar;
    select * from nisan_satislar;
    
--    ORNEK1: MART VE NÝSAN aylarýnda ayný URUN_ID ile satýlan ürünlerin
 -- URUN_ID’lerini listeleyen ve ayný zamanda bu ürünleri MART ayýnda alan
--  MUSTERI_ISIM 'lerini listeleyen bir sorgu yazýnýz.
select urun_id, musteri_isim from mart_satýslar 
where urun_id IN (select urun_id from nisan_satislar
                    where mart_satýslar.urun_ýd = nisan_satislar.urun_ýd);
                    
--2.yol -- exists kullanimi
select urun_id, musteri_isim from mart_satýslar 
where EXISTS (select urun_id from nisan_satislar
                    where mart_satýslar.urun_ýd = nisan_satislar.urun_ýd);


-- ORNEK2: Her iki ayda da satýlan ürünlerin URUN_ISIM'lerini ve bu ürünleri
-- NÝSAN ayýnda satýn alan MUSTERI_ISIM'lerini listeleyen bir sorgu yazýnýz.
select urun_isim, musteri_isim from nisan_satislar n
where EXISTS (select urun_isim from mart_satislar m
                where m.urun_isim = n.urun_isim);

--ORNEK3: Her iki ayda da ortak olarak satýlmayan ürünlerin URUN_ISIM'lerini
--  ve bu ürünleri NÝSAN ayýnda satýn alan MUSTERI_ISIM'lerini listeleyiniz.
select urun_isim, musteri_isim from nisan_satislar n
where NOT EXISTS (select urun_isim from mart_satýslar m  --"not exists" esit olmayanlari getir diye yazildi
                where m.urun_ýsým = n.urun_ýsým);


/*===================== IS NULL, IS NOT NULL, COALESCE(kulesk=birleþmek) ========================
    IS NULL, ve IS NOT NULL BOOLEAN operatörleridir. Bir ifadenin NULL olup
    olmadýðýný kontrol ederler.
    
    * COALESCE (birleþmek) ise bir fonksiyondur ve içerisindeki parameterelerden NULL olmayan
    ilk ifadeyi döndürür. Eðer aldýðý tüm ifadeler NULL ise NULL döndürürür.
   *** select COALESCE (sütun1,sütun2,...) from tabloAdý;
    Birden fazla null koþuluna göre deðer atamak istiyorsak COALESCE deyimini kullanabiliriz.
    COALESCE aslýnda case mantýðýnda çalýþýr ve birden fazla kolon arasýnda kontrol saðlayabilirsiniz.
    Bir koþul gerçekleþmez ise diðerine bakar, oda gerçekleþmez ise bir sonraki.
    Deyim bitene kadar
   -- CASE
   WHEN (expression1 IS NOT NULL) THEN expression1
   WHEN (expression2 IS NOT NULL) THEN expression2
   ...
   ELSE expressionN
   END  --gibi
==============================================================================*/
    CREATE TABLE insanlar
    (
        ssn CHAR(9),
        isim VARCHAR2(50),
        adres VARCHAR2(50)
    );
    
    INSERT INTO insanlar VALUES('123456789', 'Ali Can', 'Istanbul');
    INSERT INTO insanlar VALUES('234567890', 'Veli Cem', 'Ankara');
    INSERT INTO insanlar VALUES('345678901', 'Mine Bulut', 'Izmir');
    INSERT INTO insanlar (ssn, adres) VALUES('456789012', 'Bursa');
    INSERT INTO insanlar (ssn, adres) VALUES('567890123', 'Denizli');
    INSERT INTO insanlar (adres) VALUES('Sakarya');
    INSERT INTO insanlar (ssn) VALUES('999111222');

select * from insanlar;

--ORNEK 1 : isim'i NULL olanlari sorgulayiniz
SELECT * FROM insanlar
WHERE isim IS NULL;

-- ORNEK 2 : isim'i NULL olmayanlari sorgulayiniz
SELECT * FROM insanlar
WHERE isim IS NOT NULL;

--ORNEK3: isim 'i NULL olan kiþilerin isim'ine NO NAME atayýnýz.
UPDATE insanlar
set ýsým='NO NAME'
where isim IS NULL;

--eski haline getirmek icin
UPDATE insanlar
set ýsým= NULL
where isim='NO NAME';


SELECT COALESCE (isim, ssn, adres) from insanlar; --birlesitrerek siraya gore null olmayanlari dondurur


-- ornek: tablodaki butun null degerlerinin guzel bir cumlecikle degistirin
UPDATE insanlar 
set ýsým=COALESCE (isim, 'henuz isim girilmedi'),
    adres=COALESCE (adres, 'henuz adres girilmedi'),
    ssn=COALESCE  (ssn, 'NO SSN');
    
select * from insanlar;

/*================================ ORDER BY  ===================================
   ORDER BY cümleciði bir SORGU deyimi içerisinde belli bir SUTUN’a göre
   SIRALAMA yapmak için kullanýlýr.
   Syntax
   -------
      ORDER BY sutun_adi ASC   -- ARTAN
      ORDER BY sutun_adi DESC  -- AZALAN
=========================================*/

CREATE TABLE kisiler
    (
        ssn CHAR(9) PRIMARY KEY,
        isim VARCHAR2(50),
        soyisim VARCHAR2(50),
        maas NUMBER,
        adres VARCHAR2(50)
    );
    INSERT INTO kisiler VALUES(123456789, 'Ali','Can', 3000,'Istanbul');
    INSERT INTO kisiler VALUES(234567890, 'Veli','Cem', 2890,'Ankara');
    INSERT INTO kisiler VALUES(345678901, 'Mine','Bulut',4200,'Ankara');
    INSERT INTO kisiler VALUES(256789012, 'Mahmut','Bulut',3150,'Istanbul');
    INSERT INTO kisiler VALUES (344678901, 'Mine','Yasa', 5000,'Ankara');
    INSERT INTO kisiler VALUES (345458901, 'Veli','Yilmaz',7000,'Istanbul');
    SELECT * FROM kisiler;
/* ----------------------------------------------------------------------------
  ORNEK1: kisiler tablosunu adres'e göre sýralayarak sorgulayýnýz.
 -----------------------------------------------------------------------------*/
SELECT * FROM kisiler
ORDER BY adres ASC; -- asc yazilsa da yazilmasada olur cunklu duz siralama

--ORNEK2: kisiler tablosunu maas'e göre ters sýralayarak sorgulayýnýz.
 ----------------------------------------------------------------------------
 SELECT * FROM kisiler
ORDER BY maas DESC;

--ORNEK4: ismi Mine olanlarý, SSN'e göre AZALAN(DESC) sýrada sorgulayýnýz.
SELECT * FROM kisiler
where isim='Mine'
ORDER BY ssn DESC;
 
-- ORNEK5: soyismi 'i Bulut olanlarý isim sýralý olarak sorgulayýnýz.
----------------------------------------------------------------------
SELECT * FROM kisiler
where soyisim='Bulut'
ORDER BY 2; -- isim yerine ismin sutun sirasi olan 2 yi kullanabilirz.


/*====================== FETCH NEXT, OFFSET (12C VE ÜSTÜ oracle larda çalýþýr, daha altsanýz çalýþmaz) ======================
   FETCH cümleciði ile listelenecek kayýtlarý sýnýrlandýrabiliriz. Ýstersek
   satýr sayýsýna göre istersek de toplam satýr sayýsýnýn belli bir yüzdesine
   göre sýnýrlandýrma koymak mümkündür. (þu kadar satýrý getir)
   Syntax
   ---------
   FETCH NEXT satir_sayisi ROWS ONLY;
   FETCH NEXT satir_yuzdesi PERCENT ROWS ONLY;
   OFFSET Cümleciði ile de listenecek olan satýrlardan sýrasýyla istediðimiz
   kadarýný atlayabiliriz.
   Syntax
   ----------
   OFFSET satýr_sayisi ROWS;  offset atla, fetch getir manasina gel,yor diyebiliriz
==============================================================================*/
/* ----------------------------------------------------------------------------
  ORNEK1: MAAÞ'ý en yüksek 3 kiþinin bilgilerini listeleyen sorguyu yazýnýz.*/
--1. yol ama yeni surumlerde calisiyor
  SELECT * FROM kisiler
  ORDER BY maas DESC
  FETCH NEXT 3 ROWS ONLY;
  
  --2. yol ama eski surumlerde calisiyor
  SELECT * FROM (SELECT * FROM kisiler
    ORDER BY maas DESC)--(1) kiþilerde maasa göre ters sýrala
    WHERE ROWNUM < 4; -- 1., 2. ve 3. satiri getirmek icin 

--********************************************
--ORNEK2: MAAÞ'ý en DÜÞÜK 2 kiþinin bilgilerini listeleyen sorguyu yazýnýz.
SELECT * FROM kisiler
ORDER BY maas 
FETCH NEXT 2 ROWS ONLY;

SELECT * FROM (SELECT * FROM kisiler
    ORDER BY maas )--(1) kiþilerde maasa göre ters sýrala
    WHERE ROWNUM < 3;
    
    --ek cozum ornek 2 icin 
    select * from kisiler
    where rownum <3
    order by maas;
    
--********************************************

--ORNEK3: MAAÞ'a göre azalan sýralamada 4. 5. ve 6. kiþilerin bilgilerini listeleyen sorguyu yazýnýz.
select * from kisiler
order by maas desc
offset 3 rows
FETCH NEXT 3 ROWS ONLY;

--eski version couzum
SELECT * FROM
   (SELECT * FROM
   (SELECT * FROM   kisiler
                ORDER BY maas DESC)
        WHERE ROWNUM <=6)
WHERE  ROWNUM <=3;


--ek
SELECT * FROM (SELECT * FROM   kisiler WHERE ROWNUM <=6 ORDER BY maas ) WHERE  ROWNUM <=3;

